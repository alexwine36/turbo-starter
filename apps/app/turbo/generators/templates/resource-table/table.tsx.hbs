'use client';

import { DataTable } from '@repo/design-system/components/custom/data-table';
import { Button } from '@repo/design-system/components/ui/button';
import {
DropdownMenu,
DropdownMenuContent,
DropdownMenuItem,
DropdownMenuSeparator,
DropdownMenuShortcut,
DropdownMenuTrigger,
} from '@repo/design-system/components/ui/dropdown-menu';
import { DeleteDialog } from '@repo/design-system/components/custom/delete-dialog';
import { useDataTable } from '@repo/design-system/hooks/use-datatable';
import { Ellipsis, Eye } from 'lucide-react';
import Link from 'next/link';
import { trpc } from '@/utils/trpc';
import { {{ capitalizedName }}Dialog } from '../{{ pathName }}-dialog';
import type { DataTableRowAction } from '@repo/design-system/components/custom/data-table';
import { useState, useMemo } from 'react';
import type { {{ dataType }} } from '@repo/common-types';
import { {{ capitalizedName }}Types } from '../{{ pathName }}-types';
import { getColumns } from './columns';


export const {{ capitalizedName }}Table: React.FC<{{ capitalizedName }}Types> = (props) => {
  const { data, isLoading } = trpc.{{ propertyName }}.getAll.useQuery({});
  const [rowAction, setRowAction] = useState< DataTableRowAction<{{ dataType }}> | undefined
    >(undefined);

    {{#if includeMethods.delete}}
    const { mutate: delete{{ capitalizedName }} } = trpc.{{ propertyName }}.delete.useMutation({
    onSuccess: () => {
    utils.{{ propertyName }}.getAll.invalidate();
    },
    });

    const handleDelete = async (data: {{ dataType }}[]) => {
    const res = await Promise.all(data.map((d) => delete{{ capitalizedName }}({ id: d.id })));

    };
    {{/if}}

    const columns = useMemo(() => getColumns({ setRowAction }), []);
    const table = useDataTable({
    data: data || [],
    loading: isLoading,
    columns
    });

    return (
    <>
      <DataTable {...table} />
      <{{ capitalizedName }}Dialog {{ propertyName }}={rowAction?.row?.original} open={rowAction?.type==='update' }
        onOpenChange={(isOpen)=> {
        if (!isOpen) {
        setRowAction(undefined);
        }
        }}
        {...props}
        />
        {{#if includeMethods.delete}}
        <DeleteDialog label="{{ propertyName }}" handleDelete={handleDelete} data={rowAction?.row?.original ?
          [rowAction.row.original] : []} open={rowAction?.type==='delete' } onOpenChange={()=>
          setRowAction(undefined)}
          onSuccess={() => rowAction?.row.toggleSelected(false)}
          />
          {{/if}}
    </>
    );
    };