// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// This is a stub model.
// Delete it and add your own Prisma models.
model Page {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  content Json?
}

// #region Authentication

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  members Member[]
  currentOrganizationId String?

  currentMembership Member? @relation("CurrentMembership", fields: [currentOrganizationId, email], references: [organizationId, email])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
// #endregion


// #region Organization

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  image       String?
  type        String
  description String?
  website     String?
  social      Json?
  members     Member[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Member {

  email         String
  organizationId String
  role           MemberRole @default(MEMBER)
  active Boolean @default(true)
  title          String?
  description    String?
  image          String?
  social         Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
 
  user         User         @relation(fields: [email], references: [email], onDelete: Restrict, onUpdate: Restrict)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
 
  @@id([email, organizationId])
  User User[] @relation("CurrentMembership")
  @@unique([organizationId, email])
}

// #endregion